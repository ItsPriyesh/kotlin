/* The following code was generated by JFlex 1.4.3 on 10/15/15 5:02 PM */

package org.jetbrains.kotlin.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.intellij.util.containers.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/15/15 5:02 PM from the specification file
 * <tt>/Users/abreslav/work/kotlin/compiler/frontend/src/org/jetbrains/kotlin/lexer/Kotlin.flex</tt>
 */
class _JetLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int BLOCK_COMMENT = 8;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int DOC_COMMENT = 10;
  public static final int RAW_STRING = 4;
  public static final int SHORT_TEMPLATE_ENTRY = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\7\1\0\1\3\23\0\1\3\1\13\1\27\1\12"+
    "\1\10\1\70\1\66\1\24\1\74\1\75\1\36\1\63\1\77\1\23"+
    "\1\20\1\11\1\14\11\1\1\71\1\76\1\64\1\61\1\65\1\62"+
    "\1\100\1\2\1\16\2\2\1\22\1\21\5\4\1\17\7\4\1\56"+
    "\3\4\1\15\2\4\1\72\1\25\1\73\1\0\1\4\1\6\1\42"+
    "\1\53\1\47\1\60\1\41\1\46\1\52\1\32\1\33\1\54\1\51"+
    "\1\43\1\4\1\44\1\50\1\40\1\4\1\45\1\34\1\31\1\26"+
    "\1\57\1\55\1\15\1\37\1\4\1\30\1\67\1\35\54\0\1\4"+
    "\12\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0\u01ca\4"+
    "\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4\201\0\5\4"+
    "\1\0\2\4\2\0\4\4\10\0\1\4\1\0\3\4\1\0\1\4"+
    "\1\0\24\4\1\0\123\4\1\0\213\4\10\0\236\4\11\0\46\4"+
    "\2\0\1\4\7\0\47\4\110\0\33\4\5\0\3\4\55\0\53\4"+
    "\25\0\12\5\4\0\2\4\1\0\143\4\1\0\1\4\17\0\2\4"+
    "\7\0\2\4\12\5\3\4\2\0\1\4\20\0\1\4\1\0\36\4"+
    "\35\0\131\4\13\0\1\4\16\0\12\5\41\4\11\0\2\4\4\0"+
    "\1\4\5\0\26\4\4\0\1\4\11\0\1\4\3\0\1\4\27\0"+
    "\31\4\253\0\66\4\3\0\1\4\22\0\1\4\7\0\12\4\4\0"+
    "\12\5\1\0\7\4\1\0\7\4\5\0\10\4\2\0\2\4\2\0"+
    "\26\4\1\0\7\4\1\0\1\4\3\0\4\4\3\0\1\4\20\0"+
    "\1\4\15\0\2\4\1\0\3\4\4\0\12\5\2\4\23\0\6\4"+
    "\4\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0\2\4"+
    "\1\0\2\4\37\0\4\4\1\0\1\4\7\0\12\5\2\0\3\4"+
    "\20\0\11\4\1\0\3\4\1\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\3\0\1\4\22\0\1\4\17\0\2\4\4\0\12\5"+
    "\25\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0\2\4"+
    "\1\0\5\4\3\0\1\4\36\0\2\4\1\0\3\4\4\0\12\5"+
    "\1\0\1\4\21\0\1\4\1\0\6\4\3\0\3\4\1\0\4\4"+
    "\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0\3\4"+
    "\3\0\14\4\26\0\1\4\25\0\12\5\25\0\10\4\1\0\3\4"+
    "\1\0\27\4\1\0\12\4\1\0\5\4\3\0\1\4\32\0\2\4"+
    "\6\0\2\4\4\0\12\5\25\0\10\4\1\0\3\4\1\0\27\4"+
    "\1\0\12\4\1\0\5\4\3\0\1\4\40\0\1\4\1\0\2\4"+
    "\4\0\12\5\1\0\2\4\22\0\10\4\1\0\3\4\1\0\51\4"+
    "\2\0\1\4\20\0\1\4\21\0\2\4\4\0\12\5\12\0\6\4"+
    "\5\0\22\4\3\0\30\4\1\0\11\4\1\0\1\4\2\0\7\4"+
    "\72\0\60\4\1\0\2\4\14\0\7\4\11\0\12\5\47\0\2\4"+
    "\1\0\1\4\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4"+
    "\1\0\7\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\1\0\4\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0\1\4"+
    "\11\0\12\5\2\0\2\4\42\0\1\4\37\0\12\5\26\0\10\4"+
    "\1\0\44\4\33\0\5\4\163\0\53\4\24\0\1\4\12\5\6\0"+
    "\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0\3\4\4\0"+
    "\15\4\14\0\1\4\1\0\12\5\6\0\46\4\12\0\53\4\1\0"+
    "\1\4\3\0\u0149\4\1\0\4\4\2\0\7\4\1\0\1\4\1\0"+
    "\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4\1\0"+
    "\4\4\2\0\103\4\45\0\20\4\20\0\125\4\14\0\u026c\4\2\0"+
    "\21\4\1\0\32\4\5\0\113\4\25\0\15\4\1\0\4\4\16\0"+
    "\22\4\16\0\22\4\16\0\15\4\1\0\3\4\17\0\64\4\43\0"+
    "\1\4\4\0\1\4\3\0\12\5\46\0\12\5\6\0\130\4\10\0"+
    "\51\4\1\0\1\4\5\0\106\4\12\0\35\4\51\0\12\5\36\4"+
    "\2\0\5\4\13\0\54\4\25\0\7\4\10\0\12\5\46\0\27\4"+
    "\11\0\65\4\53\0\12\5\6\0\12\5\15\0\1\4\135\0\57\4"+
    "\21\0\7\4\4\0\12\5\51\0\36\4\15\0\2\4\12\5\6\0"+
    "\46\4\32\0\44\4\34\0\12\5\3\0\3\4\12\5\44\4\153\0"+
    "\4\4\1\0\4\4\16\0\300\4\100\0\u0116\4\2\0\6\4\2\0"+
    "\46\4\2\0\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0\1\4\3\0"+
    "\3\4\1\0\7\4\3\0\4\4\2\0\6\4\4\0\15\4\5\0"+
    "\3\4\1\0\7\4\164\0\1\4\15\0\1\4\20\0\15\4\145\0"+
    "\1\4\4\0\1\4\2\0\12\4\1\0\1\4\3\0\5\4\6\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0"+
    "\4\4\5\0\5\4\4\0\1\4\64\0\2\4\u0a7b\0\57\4\1\0"+
    "\57\4\1\0\205\4\6\0\4\4\21\0\46\4\12\0\66\4\11\0"+
    "\1\4\20\0\27\4\11\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\120\0"+
    "\1\4\u01d5\0\2\4\52\0\5\4\5\0\2\4\4\0\126\4\6\0"+
    "\3\4\1\0\132\4\1\0\4\4\5\0\51\4\3\0\136\4\21\0"+
    "\33\4\65\0\20\4\u0200\0\u19b6\4\112\0\u51cc\4\64\0\u048d\4\103\0"+
    "\56\4\2\0\u010d\4\3\0\20\4\12\5\2\4\24\0\57\4\20\0"+
    "\31\4\10\0\106\4\61\0\11\4\2\0\147\4\2\0\4\4\1\0"+
    "\2\4\16\0\12\4\120\0\10\4\1\0\3\4\1\0\4\4\1\0"+
    "\27\4\35\0\64\4\16\0\62\4\34\0\12\5\30\0\6\4\3\0"+
    "\1\4\4\0\12\5\34\4\12\0\27\4\31\0\35\4\7\0\57\4"+
    "\34\0\1\4\12\5\46\0\51\4\27\0\3\4\1\0\10\4\4\0"+
    "\12\5\6\0\27\4\3\0\1\4\5\0\60\4\1\0\1\4\3\0"+
    "\2\4\2\0\5\4\2\0\1\4\1\0\1\4\30\0\3\4\43\0"+
    "\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0\7\4\221\0"+
    "\43\4\15\0\12\5\6\0\u2ba4\4\14\0\27\4\4\0\61\4\u2104\0"+
    "\u012e\4\2\0\76\4\2\0\152\4\46\0\7\4\14\0\5\4\5\0"+
    "\1\4\1\0\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4\2\0"+
    "\66\4\50\0\14\4\164\0\5\4\1\0\207\4\23\0\12\5\7\0"+
    "\32\4\6\0\32\4\13\0\131\4\3\0\6\4\2\0\6\4\2\0"+
    "\6\4\2\0\3\4\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\2\1\10\1\11\1\12\1\13\1\14\3\3"+
    "\1\15\1\16\15\3\1\17\1\20\1\21\1\22\1\23"+
    "\2\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\35\1\1\1\37\2\35"+
    "\1\40\1\1\1\40\3\41\1\42\1\43\1\44\1\0"+
    "\1\2\1\0\2\45\1\0\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\0\1\53\1\0\2\2\1\45\1\54"+
    "\1\55\1\56\1\57\2\12\1\0\3\3\1\60\1\61"+
    "\1\62\1\3\1\63\2\3\1\64\14\3\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\0\1\102\2\103\2\0\1\40"+
    "\1\104\1\105\2\0\1\106\2\45\1\3\1\0\1\107"+
    "\1\110\1\111\1\112\1\0\2\45\1\113\4\3\1\114"+
    "\4\3\1\115\2\3\1\116\1\3\1\117\7\3\1\120"+
    "\1\121\1\122\2\0\1\123\2\40\1\44\1\46\1\124"+
    "\1\125\1\126\2\3\1\127\3\3\1\130\1\131\7\3"+
    "\1\132\1\133\1\101\1\0\1\134\1\135\2\3\1\136"+
    "\2\3\1\137\1\140\2\3\1\141\1\142\1\0\3\3"+
    "\1\143\1\3\1\144\2\3\1\145\3\3\1\146\1\147"+
    "\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0186\0\u0514\0\u0555\0\u0596"+
    "\0\u0186\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u0186\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0186\0\u0186\0\u0186\0\u0186\0\u0b6d\0\u0186\0\u0186\0\u0bae"+
    "\0\u0186\0\u0bef\0\u0c30\0\u0186\0\u0186\0\u0c71\0\u0cb2\0\u0cf3"+
    "\0\u0d34\0\u0186\0\u0d75\0\u0db6\0\u0186\0\u0186\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u0186\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u1289\0\u12ca"+
    "\0\u130b\0\u134c\0\u138d\0\u0208\0\u13ce\0\u0208\0\u140f\0\u0186"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u0208"+
    "\0\u181f\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0186\0\u1860\0\u18a1\0\u0186\0\u0186\0\u18e2"+
    "\0\u1923\0\u1964\0\u19a5\0\u0186\0\u0186\0\u19e6\0\u1a27\0\u0186"+
    "\0\u1a68\0\u1aa9\0\u0186\0\u1aea\0\u1b2b\0\u1b6c\0\u1b6c\0\u0186"+
    "\0\u1bad\0\u1bee\0\u1c2f\0\u0186\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u0208\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u0186\0\u1e78\0\u1eb9"+
    "\0\u0208\0\u1efa\0\u0208\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f"+
    "\0\u2080\0\u20c1\0\u0208\0\u0208\0\u0186\0\u2102\0\u2143\0\u1923"+
    "\0\u0186\0\u2184\0\u0186\0\u0186\0\u0186\0\u0186\0\u0208\0\u21c5"+
    "\0\u2206\0\u0208\0\u2247\0\u2288\0\u22c9\0\u0208\0\u0208\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u0208\0\u0208"+
    "\0\u0186\0\u24d1\0\u0cb2\0\u0208\0\u2512\0\u2553\0\u0208\0\u2594"+
    "\0\u25d5\0\u0208\0\u0208\0\u2616\0\u2657\0\u0208\0\u0208\0\u2698"+
    "\0\u26d9\0\u271a\0\u275b\0\u0208\0\u279c\0\u0208\0\u27dd\0\u281e"+
    "\0\u0208\0\u285f\0\u28a0\0\u28e1\0\u0208\0\u0208\0\u0208";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\11\1\7\1\13\1\12"+
    "\1\14\1\15\1\16\1\17\1\20\3\11\1\21\2\11"+
    "\1\22\1\23\1\7\1\11\1\24\1\25\1\26\1\11"+
    "\1\27\1\30\1\31\1\32\1\11\1\33\1\34\1\35"+
    "\1\11\1\36\1\37\1\40\1\41\1\42\2\11\1\43"+
    "\1\11\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\7\70\1\71\1\72"+
    "\14\70\1\73\1\70\1\74\60\70\1\75\1\72\14\70"+
    "\1\75\1\70\1\76\51\70\2\7\1\77\1\7\1\77"+
    "\1\7\1\100\1\0\5\7\3\77\1\7\2\77\3\7"+
    "\1\77\2\7\1\101\3\77\2\7\22\77\20\7\11\102"+
    "\1\103\24\102\1\104\42\102\1\7\1\10\1\11\1\12"+
    "\1\11\1\7\1\13\1\12\1\14\1\15\1\16\1\17"+
    "\1\20\3\11\1\21\2\11\1\22\1\23\1\7\1\11"+
    "\1\24\1\105\1\26\1\11\1\27\1\30\1\106\1\32"+
    "\1\11\1\33\1\34\1\35\1\11\1\36\1\37\1\40"+
    "\1\41\1\42\2\11\1\43\1\11\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\102\0\1\10\1\107\1\0\1\107\1\0\1\110"+
    "\5\0\1\10\2\107\1\111\1\112\1\113\1\114\3\0"+
    "\1\107\2\0\4\107\2\0\2\107\1\114\1\107\1\111"+
    "\2\107\1\113\12\107\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\22\11\23\0\1\12\3\0\1\12\71\0\6\115\2\0"+
    "\71\115\2\0\1\116\1\0\1\116\1\0\1\117\6\0"+
    "\3\116\1\0\2\116\3\0\1\116\2\0\4\116\2\0"+
    "\22\116\31\0\1\120\24\0\1\121\22\0\1\122\32\0"+
    "\1\123\120\0\1\124\25\0\1\125\20\0\1\126\1\107"+
    "\1\0\1\107\1\0\1\110\5\0\1\126\1\127\1\130"+
    "\1\111\1\112\1\113\1\114\3\0\1\107\2\0\4\107"+
    "\2\0\2\107\1\114\1\107\1\111\2\107\1\113\4\107"+
    "\1\130\5\107\21\0\1\131\12\0\1\131\3\0\1\132"+
    "\103\0\1\133\35\0\1\134\3\0\1\135\13\0\7\23"+
    "\1\0\14\23\1\136\1\137\53\23\27\0\1\140\52\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\1\11\1\141\2\11\2\0\1\142\5\11"+
    "\1\143\13\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\3\11\1\144\2\0"+
    "\5\11\1\145\1\11\1\146\12\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\147\2\0"+
    "\4\11\2\0\22\11\101\0\1\150\20\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\3\11\1\151\16\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\4\11\1\152\15\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\3\11\1\153\2\0\22\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\154\2\0\4\11"+
    "\2\0\22\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\155\17\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\156\2\0\4\11\2\0\3\11"+
    "\1\157\5\11\1\160\10\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\2\0\4\11\1\161\4\11\1\162\10\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\2\0\14\11\1\163\5\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\2\0\6\11\1\164\13\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\11\1\165\2\11\2\0\22\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\11\1\166\2\11\2\0\22\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\2\0\3\11\1\167\16\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\2\0\11\11\1\170\10\11\101\0\1\171"+
    "\3\0\1\172\74\0\1\173\1\0\1\174\76\0\1\175"+
    "\100\0\1\176\105\0\1\177\101\0\1\200\72\0\1\201"+
    "\110\0\1\202\105\0\1\203\2\0\7\70\2\0\14\70"+
    "\1\0\1\70\1\0\51\70\2\0\1\204\1\0\1\204"+
    "\1\0\1\205\6\0\3\204\1\0\2\204\3\0\1\204"+
    "\1\0\1\206\4\204\2\0\22\204\20\0\7\207\1\0"+
    "\16\207\1\210\52\207\27\0\1\211\52\0\2\77\1\0"+
    "\2\77\6\0\4\77\1\0\2\77\3\0\1\77\2\0"+
    "\4\77\2\0\22\77\20\0\6\212\2\0\71\212\1\0"+
    "\2\77\1\0\2\77\6\0\4\77\1\0\2\77\3\0"+
    "\1\77\2\0\1\77\1\213\2\77\2\0\22\77\56\0"+
    "\1\214\53\0\1\215\70\0\2\107\1\0\2\107\6\0"+
    "\4\107\1\0\2\107\3\0\1\107\2\0\4\107\2\0"+
    "\22\107\20\0\6\216\2\0\71\216\1\0\2\107\1\0"+
    "\2\107\1\110\5\0\4\107\1\217\2\107\3\0\1\107"+
    "\2\0\4\107\2\0\22\107\21\0\1\131\12\0\1\131"+
    "\3\0\1\220\61\0\2\107\1\0\2\107\1\110\5\0"+
    "\4\107\1\0\2\107\3\0\1\107\2\0\4\107\2\0"+
    "\22\107\21\0\1\221\1\107\1\0\2\107\1\110\5\0"+
    "\1\221\3\107\1\0\1\113\1\107\1\222\2\0\1\107"+
    "\2\0\4\107\2\0\7\107\1\113\12\107\2\0\1\222"+
    "\15\0\6\115\1\223\1\0\71\115\1\0\2\116\1\0"+
    "\2\116\6\0\4\116\1\0\2\116\3\0\1\116\2\0"+
    "\4\116\2\0\22\116\20\0\6\224\2\0\71\224\7\120"+
    "\1\0\71\120\36\0\1\225\42\0\7\123\1\0\71\123"+
    "\34\0\1\226\7\0\1\227\115\0\1\230\20\0\1\126"+
    "\12\0\1\126\3\0\1\231\1\232\1\233\16\0\1\233"+
    "\4\0\1\232\33\0\2\127\1\0\2\107\1\110\5\0"+
    "\1\127\1\107\1\127\1\111\1\217\2\127\3\0\1\107"+
    "\2\0\4\107\2\0\2\107\2\127\1\111\2\107\2\127"+
    "\3\107\1\127\4\107\1\127\21\0\1\130\1\107\1\0"+
    "\2\107\1\110\5\0\1\130\2\107\1\111\1\217\2\107"+
    "\3\0\1\107\2\0\4\107\2\0\4\107\1\111\15\107"+
    "\21\0\1\131\1\107\1\0\1\107\1\0\1\110\5\0"+
    "\1\131\3\107\1\0\1\113\1\114\3\0\1\107\2\0"+
    "\4\107\2\0\2\107\1\114\4\107\1\113\12\107\20\0"+
    "\7\23\1\0\71\23\27\0\1\234\52\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\2\11\1\235\1\11\2\0\6\11\1\236\13\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\1\11\1\237\20\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\240\2\0\4\11\2\0\1\241\21\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\242\3\11\2\0\22\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\1\11\1\243\20\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\10\11\1\244\11\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\3\11\1\245\2\0\22\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\2\0\22\11\1\0\1\246\17\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\2\0\4\11\1\247\15\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\1\250"+
    "\3\11\2\0\22\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\5\11\1\251\14\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\4\11\1\252\15\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\6\11\1\253\13\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\3\11\1\254\16\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\5\11\1\255\14\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\15\11\1\256\4\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\2\11\1\257\17\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\2\11\1\260"+
    "\1\11\2\0\2\11\1\261\17\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\2\11\1\262\1\11\2\0\22\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\4\11\1\263\1\11\1\264\13\11\101\0"+
    "\1\265\20\0\2\204\1\0\2\204\6\0\4\204\1\0"+
    "\2\204\3\0\1\204\2\0\4\204\2\0\22\204\20\0"+
    "\6\266\2\0\71\266\1\0\2\267\11\0\1\267\1\0"+
    "\1\267\2\0\2\267\16\0\2\267\3\0\2\267\3\0"+
    "\1\267\4\0\1\267\47\0\1\270\51\0\6\212\1\271"+
    "\1\0\71\212\1\0\2\77\1\0\2\77\6\0\4\77"+
    "\1\0\2\77\3\0\1\77\2\0\2\77\1\272\1\77"+
    "\2\0\22\77\20\0\6\216\1\273\1\0\71\216\20\0"+
    "\1\220\61\0\1\221\1\107\1\0\2\107\1\110\5\0"+
    "\1\221\3\107\1\0\1\113\1\107\3\0\1\107\2\0"+
    "\4\107\2\0\7\107\1\113\12\107\21\0\1\222\1\107"+
    "\1\0\1\107\1\0\1\110\5\0\1\222\3\107\1\0"+
    "\1\113\1\107\3\0\1\107\2\0\4\107\2\0\7\107"+
    "\1\113\12\107\20\0\6\224\1\274\1\0\71\224\11\0"+
    "\1\275\70\0\2\276\1\0\2\276\6\0\4\276\1\0"+
    "\2\276\3\0\1\276\2\0\4\276\2\0\22\276\21\0"+
    "\1\131\12\0\1\131\66\0\1\107\1\0\1\107\1\0"+
    "\1\110\6\0\3\107\1\0\2\107\3\0\1\107\2\0"+
    "\4\107\2\0\22\107\21\0\1\222\1\107\1\0\1\107"+
    "\1\0\1\110\5\0\1\222\3\107\1\0\1\113\1\107"+
    "\1\222\2\0\1\107\2\0\4\107\2\0\7\107\1\113"+
    "\12\107\2\0\1\222\16\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\3\11\1\277"+
    "\2\0\22\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\11\11"+
    "\1\300\10\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\301\17\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\302\17\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\303\17\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\304\17\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\12\11"+
    "\1\305\7\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\2\11"+
    "\1\306\17\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\11\2\0\4\11\2\0\4\11"+
    "\1\307\15\11\21\0\2\11\1\0\2\11\6\0\4\11"+
    "\1\0\2\11\3\0\1\310\2\0\4\11\2\0\22\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\3\11\1\311\2\0\22\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\3\11\1\312\2\0\22\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\1\313\3\11\2\0\22\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\2\11\1\314\17\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\3\11\1\315\16\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\4\11\1\316\15\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\4\11\2\0\5\11\1\317\14\11\21\0\2\11\1\0"+
    "\2\11\6\0\4\11\1\0\2\11\3\0\1\11\2\0"+
    "\3\11\1\320\2\0\22\11\20\0\6\266\1\321\1\0"+
    "\71\266\1\0\2\322\11\0\1\322\1\0\1\322\2\0"+
    "\2\322\16\0\2\322\3\0\2\322\3\0\1\322\4\0"+
    "\1\322\21\0\2\77\1\0\2\77\6\0\4\77\1\0"+
    "\2\77\3\0\1\77\2\0\3\77\1\323\2\0\22\77"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\16\11\1\324\3\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\3\11\1\325\16\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\6\11\1\326\13\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\6\11\1\327\13\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\3\11\1\330\16\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\6\11\1\331\13\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\4\11\2\0\2\11\1\332\17\11"+
    "\21\0\2\11\1\0\2\11\6\0\4\11\1\0\2\11"+
    "\3\0\1\11\2\0\3\11\1\333\2\0\22\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\2\11\1\334\1\11\2\0\22\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\10\11\1\335\11\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\12\11\1\336\7\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\2\11\1\337\17\11\21\0"+
    "\2\340\11\0\1\340\1\0\1\340\2\0\2\340\16\0"+
    "\2\340\3\0\2\340\3\0\1\340\4\0\1\340\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\4\11\1\341\15\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\7\11\1\342\12\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\13\11\1\343\6\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\5\11\1\344\14\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\4\11\2\0\5\11\1\345\14\11\21\0"+
    "\2\11\1\0\2\11\6\0\4\11\1\0\2\11\3\0"+
    "\1\11\2\0\1\346\3\11\2\0\22\11\21\0\2\207"+
    "\11\0\1\207\1\0\1\207\2\0\2\207\16\0\2\207"+
    "\3\0\2\207\3\0\1\207\4\0\1\207\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\2\11\1\347\1\11\2\0\22\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\2\0\3\11\1\350\16\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\11"+
    "\2\0\4\11\2\0\2\11\1\351\17\11\21\0\2\11"+
    "\1\0\2\11\6\0\4\11\1\0\2\11\3\0\1\352"+
    "\2\0\4\11\2\0\22\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\2\0\3\11\1\353\16\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\2\0\10\11\1\354\11\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\4\11"+
    "\2\0\2\11\1\355\17\11\21\0\2\11\1\0\2\11"+
    "\6\0\4\11\1\0\2\11\3\0\1\11\2\0\3\11"+
    "\1\356\2\0\22\11\21\0\2\11\1\0\2\11\6\0"+
    "\4\11\1\0\2\11\3\0\1\11\2\0\4\11\2\0"+
    "\2\11\1\357\17\11\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10530];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\15\1\1\11\3\1\1\11\17\1\1\11"+
    "\7\1\4\11\1\1\2\11\1\1\1\11\2\1\2\11"+
    "\4\1\1\11\2\1\2\11\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\0\3\1\5\11\1\1\1\0\7\1\1\11"+
    "\21\1\12\11\1\1\1\0\2\11\1\1\2\0\1\1"+
    "\2\11\2\0\1\11\2\1\1\11\1\0\3\1\1\11"+
    "\1\0\2\1\1\11\11\1\1\11\16\1\1\11\2\0"+
    "\1\1\1\11\1\1\4\11\22\1\1\11\1\0\15\1"+
    "\1\0\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[239];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;
    
    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    private IElementType commentStateToTokenType(int state) {
        switch (state) {
            case BLOCK_COMMENT:
                return JetTokens.BLOCK_COMMENT;
            case DOC_COMMENT:
                return JetTokens.DOC_COMMENT;
            default:
                throw new IllegalArgumentException("Unexpected state: " + state);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _JetLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1708) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) throws KotlinLexerException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new KotlinLexerException(message + "\n at '" + yytext() + "'\n" + zzBuffer);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  throws KotlinLexerException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      return;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException, KotlinLexerException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 103: 
          { return JetTokens.TYPE_ALIAS_KEYWORD ;
          }
        case 105: break;
        case 3: 
          { return JetTokens.IDENTIFIER;
          }
        case 106: break;
        case 11: 
          { pushState(STRING); return JetTokens.OPEN_QUOTE;
          }
        case 107: break;
        case 79: 
          { return JetTokens.FOR_KEYWORD ;
          }
        case 108: break;
        case 99: 
          { return JetTokens.RETURN_KEYWORD ;
          }
        case 109: break;
        case 104: 
          { return JetTokens.INTERFACE_KEYWORD ;
          }
        case 110: break;
        case 89: 
          { return JetTokens.NULL_KEYWORD ;
          }
        case 111: break;
        case 35: 
          { if (lBraceCount == 0) {
                                             popState();
                                             return JetTokens.LONG_TEMPLATE_ENTRY_END;
                                           }
                                           lBraceCount--;
                                           return JetTokens.RBRACE;
          }
        case 112: break;
        case 18: 
          { return JetTokens.LT        ;
          }
        case 113: break;
        case 53: 
          { return JetTokens.DO_KEYWORD ;
          }
        case 114: break;
        case 17: 
          { return JetTokens.PLUS      ;
          }
        case 115: break;
        case 56: 
          { return JetTokens.PLUSEQ    ;
          }
        case 116: break;
        case 92: 
          { popState(); return JetTokens.THIS_KEYWORD;
          }
        case 117: break;
        case 27: 
          { return JetTokens.COMMA     ;
          }
        case 118: break;
        case 19: 
          { return JetTokens.GT        ;
          }
        case 119: break;
        case 4: 
          { return JetTokens.WHITE_SPACE;
          }
        case 120: break;
        case 25: 
          { return JetTokens.RPAR      ;
          }
        case 121: break;
        case 55: 
          { return JetTokens.DOUBLE_ARROW;
          }
        case 122: break;
        case 87: 
          { return JetTokens.TRUE_KEYWORD ;
          }
        case 123: break;
        case 38: 
          { return JetTokens.FIELD_IDENTIFIER;
          }
        case 124: break;
        case 60: 
          { return JetTokens.ANDAND    ;
          }
        case 125: break;
        case 66: 
          { pushState(LONG_TEMPLATE_ENTRY); return JetTokens.LONG_TEMPLATE_ENTRY_START;
          }
        case 126: break;
        case 37: 
          { return JetTokens.FLOAT_LITERAL;
          }
        case 127: break;
        case 39: 
          { return JetTokens.EOL_COMMENT;
          }
        case 128: break;
        case 90: 
          { return JetTokens.WHEN_KEYWORD ;
          }
        case 129: break;
        case 75: 
          { pushState(RAW_STRING); return JetTokens.OPEN_QUOTE;
          }
        case 130: break;
        case 21: 
          { return JetTokens.COLON     ;
          }
        case 131: break;
        case 58: 
          { return JetTokens.LTEQ      ;
          }
        case 132: break;
        case 47: 
          { return JetTokens.ARROW     ;
          }
        case 133: break;
        case 32: 
          { popState(); return JetTokens.IDENTIFIER;
          }
        case 134: break;
        case 22: 
          { return JetTokens.LBRACKET  ;
          }
        case 135: break;
        case 70: 
          { yypushback(2); return JetTokens.INTEGER_LITERAL;
          }
        case 136: break;
        case 10: 
          { return JetTokens.CHARACTER_LITERAL;
          }
        case 137: break;
        case 81: 
          { return JetTokens.VAR_KEYWORD ;
          }
        case 138: break;
        case 59: 
          { return JetTokens.GTEQ      ;
          }
        case 139: break;
        case 2: 
          { return JetTokens.INTEGER_LITERAL;
          }
        case 140: break;
        case 13: 
          { return JetTokens.RBRACE    ;
          }
        case 141: break;
        case 96: 
          { return JetTokens.CLASS_KEYWORD ;
          }
        case 142: break;
        case 76: 
          { return JetTokens.TRY_KEYWORD ;
          }
        case 143: break;
        case 7: 
          { return JetTokens.EXCL      ;
          }
        case 144: break;
        case 43: 
          { return JetTokens.EXCLEQ    ;
          }
        case 145: break;
        case 46: 
          { return JetTokens.MINUSEQ   ;
          }
        case 146: break;
        case 101: 
          { return JetTokens.PACKAGE_KEYWORD ;
          }
        case 147: break;
        case 93: 
          { return JetTokens.THROW_KEYWORD ;
          }
        case 148: break;
        case 94: 
          { return JetTokens.SUPER_KEYWORD ;
          }
        case 149: break;
        case 69: 
          { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             popState();
             zzStartRead = commentStart;
             return commentStateToTokenType(state);
        }
          }
        case 150: break;
        case 98: 
          { return JetTokens.WHILE_KEYWORD ;
          }
        case 151: break;
        case 45: 
          { return JetTokens.MINUSMINUS;
          }
        case 152: break;
        case 102: 
          { return JetTokens.CONTINUE_KEYWORD ;
          }
        case 153: break;
        case 73: 
          { return JetTokens.NOT_IN;
          }
        case 154: break;
        case 64: 
          { return JetTokens.DOUBLE_SEMICOLON;
          }
        case 155: break;
        case 5: 
          { return JetTokens.DIV       ;
          }
        case 156: break;
        case 83: 
          { int length = yytext().length();
                                    if (length <= 3) { // closing """
                                        popState();
                                        return JetTokens.CLOSING_QUOTE;
                                    }
                                    else { // some quotes at the end of a string, e.g. """ "foo""""
                                        yypushback(3); // return the closing quotes (""") to the stream
                                        return JetTokens.REGULAR_STRING_PART;
                                    }
          }
        case 157: break;
        case 29: 
          { return JetTokens.REGULAR_STRING_PART;
          }
        case 158: break;
        case 16: 
          { return JetTokens.QUEST     ;
          }
        case 159: break;
        case 36: 
          { return TokenType.ERROR_ELEMENT;
          }
        case 160: break;
        case 71: 
          { pushState(DOC_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 161: break;
        case 61: 
          { return JetTokens.OROR      ;
          }
        case 162: break;
        case 20: 
          { return JetTokens.PERC      ;
          }
        case 163: break;
        case 74: 
          { return JetTokens.EXCLEQEQEQ;
          }
        case 164: break;
        case 62: 
          { return JetTokens.PERCEQ    ;
          }
        case 165: break;
        case 44: 
          { return JetTokens.RANGE     ;
          }
        case 166: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 167: break;
        case 65: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                        yypushback(yylength() - 1);
                                                        return JetTokens.SHORT_TEMPLATE_ENTRY_START;
          }
        case 168: break;
        case 72: 
          { return JetTokens.NOT_IS;
          }
        case 169: break;
        case 14: 
          { return JetTokens.MUL       ;
          }
        case 170: break;
        case 23: 
          { return JetTokens.RBRACKET  ;
          }
        case 171: break;
        case 57: 
          { return JetTokens.PLUSPLUS  ;
          }
        case 172: break;
        case 40: 
          { pushState(BLOCK_COMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
          }
        case 173: break;
        case 86: 
          { return JetTokens.THIS_KEYWORD ;
          }
        case 174: break;
        case 8: 
          { return JetTokens.DOT       ;
          }
        case 175: break;
        case 26: 
          { return JetTokens.SEMICOLON ;
          }
        case 176: break;
        case 50: 
          { return JetTokens.IF_KEYWORD ;
          }
        case 177: break;
        case 67: 
          { return JetTokens.ESCAPE_SEQUENCE;
          }
        case 178: break;
        case 31: 
          { popState(); return JetTokens.CLOSING_QUOTE;
          }
        case 179: break;
        case 15: 
          { return JetTokens.EQ        ;
          }
        case 180: break;
        case 28: 
          { return JetTokens.AT        ;
          }
        case 181: break;
        case 77: 
          { return JetTokens.AS_SAFE;
          }
        case 182: break;
        case 24: 
          { return JetTokens.LPAR      ;
          }
        case 183: break;
        case 9: 
          { return JetTokens.MINUS     ;
          }
        case 184: break;
        case 95: 
          { return JetTokens.FALSE_KEYWORD ;
          }
        case 185: break;
        case 68: 
          { commentDepth++;
          }
        case 186: break;
        case 78: 
          { return JetTokens.FUN_KEYWORD ;
          }
        case 187: break;
        case 48: 
          { return JetTokens.IS_KEYWORD ;
          }
        case 188: break;
        case 30: 
          { popState(); yypushback(1); return JetTokens.DANGLING_NEWLINE;
          }
        case 189: break;
        case 34: 
          { lBraceCount++; return JetTokens.LBRACE;
          }
        case 190: break;
        case 85: 
          { yypushback(3); return JetTokens.EXCL;
          }
        case 191: break;
        case 41: 
          { return JetTokens.DIVEQ     ;
          }
        case 192: break;
        case 88: 
          { return JetTokens.ELSE_KEYWORD ;
          }
        case 193: break;
        case 52: 
          { return JetTokens.AS_KEYWORD ;
          }
        case 194: break;
        case 49: 
          { return JetTokens.IN_KEYWORD ;
          }
        case 195: break;
        case 54: 
          { return JetTokens.EQEQ      ;
          }
        case 196: break;
        case 82: 
          { return JetTokens.EQEQEQ    ;
          }
        case 197: break;
        case 80: 
          { return JetTokens.VAL_KEYWORD ;
          }
        case 198: break;
        case 91: 
          { return JetTokens.CAPITALIZED_THIS_KEYWORD ;
          }
        case 199: break;
        case 51: 
          { return JetTokens.MULTEQ    ;
          }
        case 200: break;
        case 42: 
          { if (zzCurrentPos == 0) {
                return JetTokens.SHEBANG_COMMENT;
            }
            else {
                yypushback(yylength() - 1);
                return JetTokens.HASH;
            }
          }
        case 201: break;
        case 12: 
          { return JetTokens.LBRACE    ;
          }
        case 202: break;
        case 100: 
          { return JetTokens.OBJECT_KEYWORD ;
          }
        case 203: break;
        case 97: 
          { return JetTokens.BREAK_KEYWORD ;
          }
        case 204: break;
        case 84: 
          { return JetTokens.BLOCK_COMMENT;
          }
        case 205: break;
        case 63: 
          { return JetTokens.COLONCOLON;
          }
        case 206: break;
        case 33: 
          { 
          }
        case 207: break;
        case 6: 
          { return JetTokens.HASH      ;
          }
        case 208: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case BLOCK_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 240: break;
            case DOC_COMMENT: {
              int state = yystate();
        popState();
        zzStartRead = commentStart;
        return commentStateToTokenType(state);
            }
            case 241: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
